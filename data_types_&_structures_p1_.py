# -*- coding: utf-8 -*-
"""Data types & structures p1.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ASjdY5AKvB_tehtaJjJlDbFDKHeNjJXb
"""

# Lecture & notes by Mr Akhona Njeje.
# Topic : Basics on Data Types.
# 29 May 2024.



string = "Hi Akhona Njeje :-)."
print(string)
# string refers to text, words, etc.
# strings include the methods = join(), split(), replace(), lower(), upper(), etc.

integer = 5
print(integer)
# integer refers to numbers.
# integers provide a wide range of functions = math.sqrt(), math.pow(), math.factorial(), int(), random.randint(), random() etc.

float = 3.14
print(float)
# float refers to decimal numbers.

boolen = True
print(boolen)
# boolen refers to True/False.

# Conditional statements.

x = 3
if x > 1:
  print("X is bigger than 1.")

y = 0
if y > 1:
  print("Y is bigger than 1.")
else:
  print("Y is smaller than 1")

w = 15
if w > 0 and w < 12:
  print("W is between 0 & 12.")
else:
  print("W is not between 0 & 12.")

z = 15
if z > 0 or z < 12:
  print("Z is between 0 & 12.")
else:
  print("Z is not between 0 & 12.")

a = 5
if (a > 0 and a < 12) or a == 13:
  print("a is between 0 & 12 or a is 13.")
else:
  print("a is not.")

# Lists.

list = [1,2,3]
print(list)

#indexing list : indexes start from zero.
index1 = list[1]
print(index1)


# index1.pop() : error.
# index1.remove(1) : error.
#index1.sorted() : error.
print(len(index1))

# Lists.

# Creating a list
fruits = ["apple", "banana", "orange"]
numbers = [1, 2, 3, 4, 5]
mixed_list = [1, "apple", True, 3.14]

# Printing the lists
print(fruits)       # Output: ['apple', 'banana', 'orange']
print(numbers)      # Output: [1, 2, 3, 4, 5]
print(mixed_list)   # Output: [1, 'apple', True, 3.14]

# Lists.

# indexing.

fruits = ["apple", "banana", "orange"]
print(fruits[0])     # Output: apple
print(fruits[1])     # Output: banana
print(fruits[2])     # Output: orange

# Lists.

# slicing.

numbers = [1, 2, 3, 4, 5]
print(numbers[1:4])   # Output: [2, 3, 4]
print(numbers[:3])    # Output: [1, 2, 3]
print(numbers[2:])    # Output: [3, 4, 5]

fruits = ["apple", "banana", "orange"]
fruits[1] = "grape"
print(fruits)         # Output: ['apple', 'grape', 'orange']

fruits = ["apple", "banana", "orange"]
fruits.append("grape")
print(fruits)         # Output: ['apple', 'banana', 'orange', 'grape']

numbers = [1, 2, 3, 4, 5]
numbers.insert(2, 10)
print(numbers)        # Output: [1, 2, 10, 3, 4, 5]

fruits = ["apple", "banana", "orange", "banana"]
fruits.remove("banana")
print(fruits)

numbers = [1, 2, 3, 4, 5]
popped = numbers.pop(3)
print(numbers)        # Output: [1, 2, 3, 5]
print(popped)         # Output: 4

fruits = ["apple", "banana", "orange"]
del fruits[1]
print(fruits)         # Output: ['apple', 'orange']

fruits = ["apple", "banana", "orange"]
index = fruits.index("banana")
print(index)          # Output: 1

fruits = ["apple", "banana", "orange", "banana"]
count = fruits.count("banana")
print(count)          # Output: 2

numbers = [5, 2, 4, 1, 3]
numbers.sort()
print(numbers)        # Output: [1, 2, 3, 4, 5]

numbers = [1, 2, 3, 4, 5]
numbers.reverse()
print(numbers)        # Output: [5, 4, 3, 2, 1]

# Syntax: [expression for item in iterable if condition]
numbers = [1, 2, 3, 4, 5]
squared = [num ** 2 for num in numbers if num % 2 == 0]
print(squared)        # Output: [4, 16]

# Example: Create a list of even numbers from 1 to 10
evens = [num for num in range(1, 11) if num % 2 == 0]
print(evens)          # Output: [2, 4, 6, 8, 10]

fruits = ["apple", "banana", "orange"]
length = len(fruits)
print(length)         # Output: 3

numbers = [1, 2, 3, 4, 5]
minimum = min(numbers)
maximum = max(numbers)
print(minimum)        # Output: 1
print(maximum)        # Output: 5

numbers = [1, 2, 3, 4, 5]
total = sum(numbers)
print(total)          # Output: 15

numbers = [5, 2, 4, 1, 3]
sorted_numbers = sorted(numbers)
print(sorted_numbers)  # Output: [1, 2, 3, 4, 5]

fruits = ["apple", "banana", "orange"]
fruits.clear()
print(fruits)         # Output: []

fruits = ["apple", "banana", "orange"]
fruits_copy = fruits.copy()
print(fruits_copy)    # Output: ['apple', 'banana', 'orange']

# Lists.

# Nested lists.

nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(nested_list[1])            # Output: [4, 5, 6]
print(nested_list[1][2])         # Output: 6

# Lists.

# Use Cases and Applications
# Lists are widely used in Python programming and find an application in various scenarios, including:
### Storing and managing collections of data.
### Iterating over elements using loops.
### Implementing stacks, queues, and other data structures.
### Sorting and manipulating data.
### Storing results and generating reports.

# Functions.

def squared(x:int):
  y = x**2
  return(y)

print(squared(3))

# Functions.

def power(a, b):
  return a**b

print(power(3, 3))